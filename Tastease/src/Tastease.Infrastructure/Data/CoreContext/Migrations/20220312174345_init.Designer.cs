// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tastease.Infrastructure.Data.CoreContext;

#nullable disable

namespace Tastease.Infrastructure.Data.CoreContext.Migrations
{
    [DbContext(typeof(CoreDbContext))]
    [Migration("20220312174345_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.AllergyTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CookTableId")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<string>("Serverity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CookTableId");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("IngredientId");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.ApplianceTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PantryTableId")
                        .HasColumnType("int");

                    b.Property<int?>("RecipeTableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PantryTableId");

                    b.HasIndex("RecipeTableId");

                    b.ToTable("Appliances");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.CookTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ExperienceLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.ToTable("Cooks");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.CuisineTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("Name", "Region")
                        .IsUnique();

                    b.ToTable("Cuisines");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.IngredientTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PantryTableId")
                        .HasColumnType("int");

                    b.Property<int?>("RecipeTableId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PantryTableId");

                    b.HasIndex("RecipeTableId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.InstructionTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adjustments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ApplianceId")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<string>("Step")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplianceId");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("RecipeId");

                    b.ToTable("Instructions");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.MeasuredIngredientTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int?>("InstructionTableId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("IngredientId");

                    b.HasIndex("InstructionTableId");

                    b.ToTable("MeasuredIngredients");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.NutritionalPropertyTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("IngredientTableId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("IngredientTableId");

                    b.ToTable("NutritionalProperties");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.PantryTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CookId")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CookId");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("Pantries");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.RecipeTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CookId")
                        .HasColumnType("int");

                    b.Property<string>("CookTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CuisineId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExecutionDifficulty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrepTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Servings")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CookId");

                    b.HasIndex("CuisineId");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.RecipeValueTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nameof")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeValueTable");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.ShelfLifeTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("IngredientTableId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("IngredientTableId");

                    b.ToTable("ShelfLifes");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.ShelfLifeValueTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nameof")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShelfLifeId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShelfLifeId");

                    b.ToTable("ShelfLifeValueTable");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.AllergyTable", b =>
                {
                    b.HasOne("Tastease.Core.RecipeAggregate.Tables.CookTable", null)
                        .WithMany("Allergies")
                        .HasForeignKey("CookTableId");

                    b.HasOne("Tastease.Core.RecipeAggregate.Tables.IngredientTable", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.ApplianceTable", b =>
                {
                    b.HasOne("Tastease.Core.RecipeAggregate.Tables.PantryTable", null)
                        .WithMany("Appliances")
                        .HasForeignKey("PantryTableId");

                    b.HasOne("Tastease.Core.RecipeAggregate.Tables.RecipeTable", null)
                        .WithMany("Appliances")
                        .HasForeignKey("RecipeTableId");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.IngredientTable", b =>
                {
                    b.HasOne("Tastease.Core.RecipeAggregate.Tables.PantryTable", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("PantryTableId");

                    b.HasOne("Tastease.Core.RecipeAggregate.Tables.RecipeTable", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeTableId");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.InstructionTable", b =>
                {
                    b.HasOne("Tastease.Core.RecipeAggregate.Tables.ApplianceTable", "Appliance")
                        .WithMany()
                        .HasForeignKey("ApplianceId");

                    b.HasOne("Tastease.Core.RecipeAggregate.Tables.RecipeTable", "Recipe")
                        .WithMany("Instructions")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appliance");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.MeasuredIngredientTable", b =>
                {
                    b.HasOne("Tastease.Core.RecipeAggregate.Tables.IngredientTable", "Ingredient")
                        .WithMany("MeasuredIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tastease.Core.RecipeAggregate.Tables.InstructionTable", null)
                        .WithMany("MeasuredIngredients")
                        .HasForeignKey("InstructionTableId");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.NutritionalPropertyTable", b =>
                {
                    b.HasOne("Tastease.Core.RecipeAggregate.Tables.IngredientTable", null)
                        .WithMany("NutritionalValues")
                        .HasForeignKey("IngredientTableId");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.PantryTable", b =>
                {
                    b.HasOne("Tastease.Core.RecipeAggregate.Tables.CookTable", "Cook")
                        .WithMany("Pantries")
                        .HasForeignKey("CookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cook");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.RecipeTable", b =>
                {
                    b.HasOne("Tastease.Core.RecipeAggregate.Tables.CookTable", "Cook")
                        .WithMany("Recipes")
                        .HasForeignKey("CookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tastease.Core.RecipeAggregate.Tables.CuisineTable", "Cuisine")
                        .WithMany()
                        .HasForeignKey("CuisineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cook");

                    b.Navigation("Cuisine");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.RecipeValueTable", b =>
                {
                    b.HasOne("Tastease.Core.RecipeAggregate.Tables.RecipeTable", "Recipe")
                        .WithMany("Values")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.ShelfLifeTable", b =>
                {
                    b.HasOne("Tastease.Core.RecipeAggregate.Tables.IngredientTable", null)
                        .WithMany("ShelfLives")
                        .HasForeignKey("IngredientTableId");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.ShelfLifeValueTable", b =>
                {
                    b.HasOne("Tastease.Core.RecipeAggregate.Tables.ShelfLifeTable", "ShelfLife")
                        .WithMany("Values")
                        .HasForeignKey("ShelfLifeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShelfLife");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.CookTable", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("Pantries");

                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.IngredientTable", b =>
                {
                    b.Navigation("MeasuredIngredients");

                    b.Navigation("NutritionalValues");

                    b.Navigation("ShelfLives");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.InstructionTable", b =>
                {
                    b.Navigation("MeasuredIngredients");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.PantryTable", b =>
                {
                    b.Navigation("Appliances");

                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.RecipeTable", b =>
                {
                    b.Navigation("Appliances");

                    b.Navigation("Ingredients");

                    b.Navigation("Instructions");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("Tastease.Core.RecipeAggregate.Tables.ShelfLifeTable", b =>
                {
                    b.Navigation("Values");
                });
#pragma warning restore 612, 618
        }
    }
}
