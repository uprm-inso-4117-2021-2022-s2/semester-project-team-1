@page "/cooks/{Id}"
@inject DialogService dialogService
@inject NotificationService notificationService

@if(Cook is not null)
{
    <CookCard Cook=Cook EnableNavigation="false"/>
    <br/>
    <RadzenCard>
        <div>Allergies</div>
        <RadzenDataList WrapItems="true" AllowPaging="true" Data="@Cook.Allergies" TItem="Allergy" PageSize="2" 
            PagerHorizontalAlign="HorizontalAlign.Left">
            <Template Context="allergy">
                <RadzenCard>
                    <div class="container">
                        <div>@allergy.Ingredient.Name</div>
                        <RadzenBadge BadgeStyle=@(allergy.Serverity is Serverity.Moderate ? BadgeStyle.Warning : BadgeStyle.Danger) Text="Severity"/>
                        <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@allergy.Ingredient.NutritionalValues" TItem="NutritionalProperty">
                            <Columns>
                                <RadzenDataGridColumn TItem="NutritionalProperty" Property="Value" Title="Value" />
                                <RadzenDataGridColumn TItem="NutritionalProperty" Property="Category" Title="Category" />
                            </Columns>
                        </RadzenDataGrid>
                        <br/>
                        <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@allergy.Ingredient.ShelfLives" TItem="ShelfLife">
                            <Columns>
                                <RadzenDataGridColumn TItem="ShelfLife" Property="State" Title="State" />
                                <RadzenDataGridColumn TItem="ShelfLife" Property="Time" Title="Duration" />
                            </Columns>
                        </RadzenDataGrid>                   
                    </div>
                </RadzenCard>
            </Template>
        </RadzenDataList>
    </RadzenCard>
    
    <br/>
    <RadzenCard>
        <b>Pantries</b>
        <RadzenDataGrid AllowColumnResize="true" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
            Data="@Cook.Pantries.ToList()" TItem="PantryPageModel">
            <Columns>
                <RadzenDataGridColumn TItem="PantryPageModel" Property="Name" Title="Name"/>
                <RadzenDataGridColumn TItem="PantryPageModel" Title="Details" TextAlign="TextAlign.Center" Filterable="false">
                    <Template Context="pantry">
                        <RadzenButton Click=@(args => OnPantryView(pantry)) Text="Read More" Icon="visibility" ButtonStyle="ButtonStyle.Secondary" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
        <br/>
        <div class="row">
            <div class="col-lg-12 text-right">
                <RadzenButton Click=OpenPantryPopup Text="Add Pantry" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Warning" />
            </div>
        </div>
    </RadzenCard>
}
else
{
    <h1>No Cook Found!</h1>    
}



@code {
    public CookPageModel? Cook { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string Id { get; set; }
    public PantryPopupPageModel PantryPopupPage { get; set; } = new();
    dynamic? ativePopup { get; set; }
    protected override void OnInitialized()
    {
        //if(string.IsNullOrEmpty(Id))
        //{
        //    return;
        //}
        //TODO: Id should be passed in to a service that gets the cook with that ID
        var banana = new Ingredient
        {
            Name = "Banana",
            Type = IngredientType.Fruits,
            NutritionalValues = new List<NutritionalProperty>
            {
                new NutritionalProperty
                {
                    Value = 22,
                    Category = NutritionalCategory.Protein
                }


            },

            ShelfLives = new List<ShelfLife>
            {
                new ShelfLife
                {
                    State = State.Ambient,
                    Time = TimeSpan.Zero
                }
            }
        };
        var mango = new Ingredient
        {
            Name = "Mango",
            Type = IngredientType.Fruits,
            NutritionalValues = new List<NutritionalProperty>
            {
                    new NutritionalProperty
                    {
                        Value = 23,
                        Category = NutritionalCategory.Protein
                    }
            },
            ShelfLives = new List<ShelfLife>
            {
                new ShelfLife
                {
                    State = State.Ambient,
                    Time = TimeSpan.Zero
                }
            }
        };

        Cook = new CookPageModel
        {
            Id = CookId.New(),
            Allergies = new List<Allergy>
            {
                new Allergy
                {
                    Serverity = Serverity.Moderate,
                    Ingredient = banana
                },
                new Allergy
                {
                    Serverity = Serverity.Moderate,
                    Ingredient = mango
                },
            },
            ExperienceLevel = ExperienceLevel.Beginner,
            Name = "Billy",
            Pantries = new List<PantryPageModel>
            {
                new PantryPageModel
                {
                    Name = "First Pantry",
                    Ingredients = new List<Ingredient>
                    {
                        new Ingredient
                        {
                            Name = "Meat",
                            Type = IngredientType.Protein,
                            ShelfLives = new List<ShelfLife>
                            {
                                new ShelfLife
                                {
                                    State = State.Ambient,
                                    Time = TimeSpan.Zero
                                }
                            },
                            NutritionalValues = new List<NutritionalProperty>
                            {
                                new NutritionalProperty
                                {
                                    Value = 23,
                                    Category = NutritionalCategory.Fat
                                }
                            }
                        }  

                    },
                    Appliances = new List<Appliance>
                    {
                        new Appliance
                        {
                            Name = "Razor",
                            Description = "Doug Marcaida: It will Keal",
                            Id = ApplianceId.Empty
                        },
                        new Appliance
                        {
                            Name = "Knife",
                            Description = "Should Cut",
                            Id = ApplianceId.Empty
                        },
                        new Appliance
                        {
                            Name = "Spoon",
                            Description = "Big or small spoon?",
                            Id = ApplianceId.Empty
                        },
                        new Appliance
                        {
                            Name = "Frying Pan",
                            Description = "Be carefull to not fry yourself",
                            Id = ApplianceId.Empty
                        }
                    }
                }
            }
        };
    }
    public async Task OnSubmit(PantryPopupPageModel pantry)
    {
        Cook.Pantries.Add(new PantryPageModel
        {
            Appliances = pantry.SelectedAppliance,
            Ingredients = pantry.SelectedIngredient,
            Name = pantry.PantryName
        });
        notificationService.Notify(new NotificationMessage
        {
            Severity = NotificationSeverity.Success,
            Summary = $"succesfully added pantry {pantry.PantryName}"
        });
        dialogService.Close(ativePopup);
        await InvokeAsync(StateHasChanged);
    }

    public async Task OpenPantryPopup()
    {
        PantryPopupPage = new();
        ativePopup = await dialogService.OpenAsync("Add Pantry", ds =>
            @<div>
                <PantryPopup @bind-Pantry=PantryPopupPage OnSubmit=@(pantry => OnSubmit(pantry))/>
            </div>
            ,new DialogOptions { Draggable = true, Resizable = true });
    }
    
    public async Task OnPantryView(PantryPageModel pantry)
    {
        ativePopup = await dialogService.OpenAsync($"{pantry.Name}", ds =>
            @<div>
                <b>Ingredients</b>
                <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@pantry.Ingredients" TItem="Ingredient">
                    <Template Context="ingredient">
                        <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@ingredient.NutritionalValues" TItem="NutritionalProperty">
                            <Columns>
                                <RadzenDataGridColumn TItem="NutritionalProperty" Property="Value" Title="Value" />
                                <RadzenDataGridColumn TItem="NutritionalProperty" Property="Category" Title="Category" />
                            </Columns>
                        </RadzenDataGrid>
                        <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@ingredient.ShelfLives" TItem="ShelfLife">
                            <Columns>       
                                <RadzenDataGridColumn TItem="ShelfLife" Property="State" Title="State" />
                                <RadzenDataGridColumn TItem="ShelfLife" Property="Time" Title="Duration" />
                            </Columns>
                        </RadzenDataGrid>
                    </Template>
                    <Columns>
                        <RadzenDataGridColumn TItem="Ingredient" Property="Ingredient.Name" Title="Name" Width="140px" />
                    </Columns>
                </RadzenDataGrid>
                <b>Appliances</b>
                <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@pantry.Appliances" TItem="Appliance">
                    <Columns>
                        <RadzenDataGridColumn TItem="Appliance" Property="Name" Title="Name" Width="140px" />
                        <RadzenDataGridColumn TItem="Appliance" Property="Description" Title="Description" Width="140px" />
                    </Columns>
                </RadzenDataGrid>
            </div>
            , new DialogOptions { Draggable = true, Resizable = true });

    }


}


