

@inject IIngredientService ingredientService
@inject ILiteralService literalService
@inject IApplianceService applianceService
@inject DialogService dialogService
@inject NotificationService notificationService

<RadzenTemplateForm Data="@Pantry" Submit="@((PantryPopupPageModel args) => { Submit(args); })">
    <div class="row">
        <div class="col-lg-12">
            <RadzenTextBox Name="PantryName" @bind-Value=Pantry.PantryName Class="w-100"/>
            <RadzenRequiredValidator Component="PantryName" Text="Pantry Name is required" Style="position: absolute"/>
            <RadzenRegexValidator Component="PantryName" Text="Pantry Name must not be empty" Pattern="^(?!\s*$).+" Style="position: absolute" />
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <RadzenLabel Text="Ingridients" Component="SelectedIngredient"/>
            <RadzenDropDown AllowClear="true" AllowFiltering="true" Name="SelectedIngredient" 
                TextProperty="Name" @bind-Value=Pantry.SelectedIngredient 
                Multiple="true" Placeholder="Select Ingredient Names" 
                Data=@Ingredients  Class="w-100"/>
            <RadzenRequiredValidator Component="SelectedIngredient" Text="At least One Ingredient is required" Style="position: absolute"/>
        </div>
        <div class="col-lg-6">
            <RadzenLabel Text="Appliances" Component="SelectedAppliance"/>
            <RadzenDropDown AllowFiltering="true" @bind-Value=Pantry.SelectedAppliance 
                TextProperty="Name" Multiple="true" Name="SelectedAppliance"
                AllowClear="true" Placeholder="Select Appliance Names" 
                Data=@Appliances  Class="w-100"/>                              
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-right" style="margin-top: 16px;">
            <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save" />
        </div>
    </div>
</RadzenTemplateForm>

@code {
    [Parameter]
    public PantryPopupPageModel Pantry { get; set; }
    [Parameter]
    public EventCallback<PantryPopupPageModel> PantryChanged { get; set; }
    public IEnumerable<Ingredient> Ingredients { get; set; }
    public IEnumerable<Appliance> Appliances { get; set; }
    [Parameter]
    public EventCallback<PantryPopupPageModel> OnSubmit { get; set; }

    protected override void OnInitialized()
    {
        var blender = new Appliance
        {
           Name = "Oster Blender",
           Description = "Oster Party Blender XL",
           Id = new ApplianceId(Guid.NewGuid())
        };

         var foodprocessor = new Appliance
        {
           Name = "Food Processor",
           Description = "Standard Food Processor",
           Id = new ApplianceId(Guid.NewGuid())
        };

        var banana = new Ingredient
        {
            Name = "Banana",
            Type = IngredientType.Fruits,
            NutritionalValues = new List<NutritionalProperty>
            {
                new NutritionalProperty
                {
                    Value = 22,
                    Category = NutritionalCategory.Protein
                }


            },

            ShelfLives = new List<ShelfLife>
            {
                new ShelfLife
                {
                    State = State.Ambient,
                    Time = TimeSpan.Zero
                }
            }
        };

        var mango = new Ingredient
        {
            Name = "Mango",
            Type = IngredientType.Fruits,
            NutritionalValues = new List<NutritionalProperty>
            {
                new NutritionalProperty
                {
                    Value = 23,
                    Category = NutritionalCategory.Protein
                }
            },

            ShelfLives = new List<ShelfLife>
            {
                new ShelfLife
                {
                    State = State.Ambient,
                    Time = TimeSpan.Zero
                }
            }
        };

        Ingredients = new List<Ingredient>
        {
            mango,
            banana
        };
        Appliances = new List<Appliance>
        {
            blender,
            foodprocessor
        };
    }

    async Task Submit(PantryPopupPageModel pantry)
    {
        await OnSubmit.InvokeAsync(pantry);
    }

}
